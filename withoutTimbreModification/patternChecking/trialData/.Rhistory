mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
# list(start_note = c(2, 0), end_note = c(3, 1))
)
connections_absent <- list(
list(start_note = c(2, 0), end_note = c(3, 1))
)
connections_present <- list(
# list(start_note = c(2, 0), end_note = c(2, 2),
# list(start_note = c(2, 0), end_note = c(2, 2)
)
connections_absent <- list(
list(start_note = c(2, 0), end_note = c(4, 1))
)
View(get_responses_with_connections(connections_present, connections_absent))
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
target_pattern <- "pitchProximity1"
aggregate_data <- dataset %>%
filter(patternId == target_pattern) %>%
group_by(noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
# list(start_note = c(2, 0), end_note = c(2, 2),
# list(start_note = c(2, 0), end_note = c(2, 2)
)
connections_absent <- list(
list(start_note = c(2, 0), end_note = c(3, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
connections_present <- list(
list(start_note = c(5, 0), end_note = c(3, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
# list(start_note = c(2, 0), end_note = c(3, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
target_pattern <- "pitchProximity2"
aggregate_data <- dataset %>%
filter(patternId == target_pattern) %>%
group_by(noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
View(aggregate_data)
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
list(start_note = c(2, 0), end_note = c(4, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
# list(start_note = c(2, 0), end_note = c(3, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
target_pattern <- "pitchProximity1"
aggregate_data <- dataset %>%
filter(patternId == target_pattern) %>%
group_by(noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
View(aggregate_data)
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
list(start_note = c(2, 0), end_note = c(3, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
# list(start_note = c(2, 0), end_note = c(3, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
# getting interpretations for a given pattern
target_pattern <- "pitchProximity2"
aggregate_data <- dataset %>%
filter(patternId == target_pattern) %>%
group_by(noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
clear
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
list(start_note = c(5, 0), end_note = c(4, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
list(start_note = c(2, 0), end_note = c(4, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
connections_present <- list(
list(start_note = c(5, 0), end_note = c(4, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
# list(start_note = c(2, 0), end_note = c(4, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
View(filtered)
connections_present <- list(
list(start_note = c(5, 0), end_note = c(4, 1))
# list(start_note = c(2, 0), end_note = c(2, 2))
)
connections_absent <- list(
list(start_note = c(2, 0), end_note = c(4, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
connections_present <- list(
list(start_note = c(5, 0), end_note = c(4, 1)),
list(start_note = c(2, 0), end_note = c(4, 1))
)
connections_absent <- list(
# list(start_note = c(2, 0), end_note = c(4, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
connections_present <- list(
# list(start_note = c(5, 0), end_note = c(4, 1)),
list(start_note = c(2, 0), end_note = c(4, 1))
)
connections_absent <- list(
list(start_note = c(5, 0), end_note = c(4, 1))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
contingency_table <- matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
print(contingency_table)
contingency_table <- matrix(c(29,2,9,16), nrow=2, byrow=TRUE)
chisq.test(contingency_table)
target_pattern <- "goodContinuation1"
aggregate_data <- dataset %>%
filter(patternId == target_pattern) %>%
group_by(noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
View(aggregate_data)
get_responses_with_connections <- function(connections_present, connections_absent) {
# function to generate regular expression for a connection
connection_regex <- function(connection) {
start_note <- paste0("\\[", connection$start_note[1], ",", connection$start_note[2], "\\]")
end_note <- paste0("\\[", connection$end_note[1], ",", connection$end_note[2], "\\]")
paste0('"startNote":', start_note, ',"endNote":', end_note)
}
search_patterns_present <- lapply(connections_present, connection_regex)
search_patterns_absent <- lapply(connections_absent, connection_regex)
# Function to check if all connections are present in a noteConnections string
all_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) str_detect(note_connections, pattern)))
}
no_connections_present <- function(note_connections, patterns) {
all(sapply(patterns, function(pattern) !str_detect(note_connections, pattern)))
}
filtered_data <- aggregate_data %>%
filter(sapply(noteConnections, all_connections_present, patterns = search_patterns_present) &
sapply(noteConnections, no_connections_present, patterns = search_patterns_absent))
}
connections_present <- list(
# list(start_note = c(5, 0), end_note = c(4, 1)),
list(start_note = c(3, 2), end_note = c(2, 3))
)
connections_absent <- list(
list(start_note = c(3, 2), end_note = c(4, 3))
)
filtered <- get_responses_with_connections(connections_present, connections_absent)
View(filtered)
sum(get_responses_with_connections(connections_present, connections_absent)$responseCount)
filtered[6,]
filtered[6,]$noteConnections
# getting interpretations for a given pattern
target_patterns <- c("goodContinuation1", "goodContinuation2")
aggregate_data <- dataset %>%
filter(patternId %in% target_patterns) %>%
group_by(patternId, noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
select(responseCount, patternId, subjects, noteConnections)
View(aggregate_data)
target_patterns <- c("goodContinuation1", "goodContinuation2")
aggregate_data <- dataset %>%
filter(patternId %in% target_patterns) %>%
group_by(patternId, noteConnections) %>%
View(aggregate_data)
target_patterns <- c("goodContinuation1", "goodContinuation2")
aggregate_data <- dataset %>%
filter(patternId %in% target_patterns)
View(aggregate_data)
target_patterns <- c("goodContinuation1", "goodContinuation2")
target_data <- dataset %>%
filter(patternId %in% target_patterns)
View(target_data)
target_pattern <- "goodContinuation1"
aggregate_data <- dataset %>%
filter(patternId %in% target_patterns) %>%
group_by(patternId, noteConnections) %>%
summarise(responseCount = n(),
subjects = list(unique(userId))) %>%
mutate(patternId = target_pattern) %>%
select(responseCount, patternId, subjects, noteConnections)
target_patterns <- c("goodContinuation1", "goodContinuation2")
target_data <- dataset %>%
filter(patternId %in% target_patterns)
View(target_data)
serList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
target_data[32,]
setwd("C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
file_list <- list.files(path="C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
dataset <- data.frame()
for (i in 1:length(file_list)){
cat(i," ")
temp_data_list <- fromJSON(file=file_list[i]) # get all trials and store in list
# iterate through list of trials, create row and append to dataset
for (j in 1:length(temp_data_list)) {
temp_data = temp_data_list[[j]]
json_connections <- toJSON(temp_data$noteConnections)
cur_row <- data.frame(
userId = temp_data$userId,
patternId = temp_data$patternId,
noteConnections = json_connections,
stringsAsFactors = FALSE
)
dataset <- rbind(dataset, cur_row)
}
}
View(dataset)
# getting list of userIds
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
dataset <- dataset %>%
filter(!userId %in% c("67977", "70370", "71648", "68992", "70281"))
View(userId)
# getting list of userIds
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
oneUser <- dataset %>%
filter(userId == "70455")
View(oneUser)
dataset <- dataset %>%
filter(!userId %in% c("70455"))
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
oneUser <- dataset %>%
filter(userId == "71334")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "71570")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "70447")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "71573")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "69508")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "70972")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "71035")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "70983")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "69992")
View(oneUser)
dataset <- dataset %>%
filter(!userId %in% c("69992"))
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
setwd("C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
file_list <- list.files(path="C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
dataset <- data.frame()
# iterate through each file
for (i in 1:length(file_list)){
cat(i," ")
temp_data_list <- fromJSON(file=file_list[i]) # get all trials and store in list
# iterate through list of trials, create row and append to dataset
for (j in 1:length(temp_data_list)) {
temp_data = temp_data_list[[j]]
json_connections <- toJSON(temp_data$noteConnections)
cur_row <- data.frame(
userId = temp_data$userId,
patternId = temp_data$patternId,
noteConnections = json_connections,
stringsAsFactors = FALSE
)
dataset <- rbind(dataset, cur_row)
}
}
View(dataset)
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
patternList <- dataset %>%
distinct(patternId) %>%
select(patternId)
View(patternList)
oneUser <- dataset %>%
filter(userId == "69992")
View(oneUser)
dataset <- dataset %>%
filter(!userId %in% c("69992"))
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
dataset <- dataset %>%
filter(!userId %in% c("69992"))
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
oneUser <- dataset %>%
filter(userId == "69992")
View(oneUser)
setwd("C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
file_list <- list.files(path="C:/Users/robke/Desktop/COGS-X497-Project/withoutTimbreModification/patternChecking/trialData")
dataset <- data.frame()
# iterate through each file
for (i in 1:length(file_list)){
cat(i," ")
temp_data_list <- fromJSON(file=file_list[i]) # get all trials and store in list
# iterate through list of trials, create row and append to dataset
for (j in 1:length(temp_data_list)) {
temp_data = temp_data_list[[j]]
json_connections <- toJSON(temp_data$noteConnections)
cur_row <- data.frame(
userId = temp_data$userId,
patternId = temp_data$patternId,
noteConnections = json_connections,
stringsAsFactors = FALSE
)
dataset <- rbind(dataset, cur_row)
}
}
View(dataset)
# getting list of userIds
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
dataset <- dataset %>%
filter(!userId %in% c("69992"))
# getting list of userIds
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
oneUser <- dataset %>%
filter(userId == "70250")
View(oneUser)
dataset <- dataset %>%
filter(!userId %in% c("70250"))
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
oneUser <- dataset %>%
filter(userId == "71648")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "70081")
View(oneUser)
oneUser <- dataset %>%
filter(userId == "70281")
View(oneUser)
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
userList <- dataset %>%
distinct(userId) %>%
select(userId)
View(userList)
patternList <- dataset %>%
distinct(patternId) %>%
select(patternId)
View(patternList)
iew(userList)
View(userList)
